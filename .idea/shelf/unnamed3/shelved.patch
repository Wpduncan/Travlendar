Index: app/src/main/java/com/example/thetravlendar/MapsActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.thetravlendar;\r\n\r\nimport android.Manifest;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.location.Location;\r\nimport android.os.Bundle;\r\nimport android.support.annotation.NonNull;\r\nimport android.support.design.widget.FloatingActionButton;\r\nimport android.support.design.widget.Snackbar;\r\nimport android.support.v4.app.ActivityCompat;\r\nimport android.support.v4.app.FragmentActivity;\r\nimport android.support.v4.content.ContextCompat;\r\nimport android.support.v7.app.AppCompatActivity;\r\nimport android.support.v7.widget.Toolbar;\r\nimport android.util.Log;\r\nimport android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.EditText;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\n\r\nimport com.android.volley.toolbox.HttpResponse;\r\nimport com.example.thetravlendar.Utils.getData;\r\nimport com.google.android.gms.common.api.Status;\r\nimport com.google.android.gms.location.FusedLocationProviderClient;\r\nimport com.google.android.gms.maps.CameraUpdate;\r\nimport com.google.android.gms.maps.CameraUpdateFactory;\r\nimport com.google.android.gms.maps.GoogleMap;\r\nimport com.google.android.gms.maps.OnMapReadyCallback;\r\nimport com.google.android.gms.maps.SupportMapFragment;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.google.android.gms.maps.model.Marker;\r\nimport com.google.android.gms.maps.model.MarkerOptions;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.android.libraries.places.api.Places;\r\nimport com.google.android.libraries.places.api.model.Place;\r\nimport com.google.android.libraries.places.api.net.PlacesClient;\r\nimport com.google.android.libraries.places.widget.AutocompleteSupportFragment;\r\nimport com.google.android.libraries.places.widget.listener.PlaceSelectionListener;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\nimport org.w3c.dom.Document;\r\nimport org.w3c.dom.Node;\r\nimport org.w3c.dom.NodeList;\r\n\r\nimport java.io.BufferedInputStream;\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.net.HttpURLConnection;\r\nimport java.net.MalformedURLException;\r\nimport java.net.URL;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.StringTokenizer;\r\n\r\nimport javax.xml.parsers.DocumentBuilder;\r\nimport javax.xml.parsers.DocumentBuilderFactory;\r\n\r\npublic class MapsActivity extends FragmentActivity implements OnMapReadyCallback {\r\n    String TAG = \"placeautocomplete\";\r\n    TextView txtView;\r\n    EditText eventView;\r\n    LatLng locationEntered;\r\n    private GoogleMap mMap;\r\n\r\n    // The entry point to the Fused Location Provider.\r\n    private FusedLocationProviderClient mFusedLocationProviderClient;\r\n\r\n    // A default location (Sydney, Australia) and default zoom to use when location permission is\r\n    // not granted.\r\n    private final LatLng mDefaultLocation = new LatLng(-33.8523341, 151.2106085);\r\n    private static final int DEFAULT_ZOOM = 15;\r\n    private static final int PERMISSIONS_REQUEST_ACCESS_FINE_LOCATION = 1;\r\n    private boolean mLocationPermissionGranted;\r\n\r\n    // The geographical location where the device is currently located. That is, the last-known\r\n    // location retrieved by the Fused Location Provider.\r\n    private Location mLastKnownLocation;\r\n    private Marker mCurrentMarker;\r\n\r\n    private String traveltime;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_maps);\r\n        // Obtain the SupportMapFragment and get notified when the map is ready to be used.\r\n        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()\r\n                .findFragmentById(R.id.map);\r\n        mapFragment.getMapAsync(this);\r\n\r\n\r\n        txtView = findViewById(R.id.txtView);\r\n        eventView = findViewById(R.id.event_location);\r\n\r\n        // Initialize Places.\r\n        Places.initialize(getApplicationContext(), \"AIzaSyDAhzX0Vvqd5Xnv7eyUHr5drHWdQwZgeq8\");\r\n        // Create a new Places client instance.\r\n        PlacesClient placesClient = Places.createClient(this);\r\n\r\n        // Initialize the AutocompleteSupportFragment.\r\n        AutocompleteSupportFragment autocompleteFragment = (AutocompleteSupportFragment)\r\n                getSupportFragmentManager().findFragmentById(R.id.autocomplete_fragment);\r\n\r\n        // Specify the types of place data to return.\r\n        autocompleteFragment.setPlaceFields(Arrays.asList(Place.Field.ID, Place.Field.NAME,\r\n                Place.Field.ADDRESS, Place.Field.LAT_LNG, Place.Field.LAT_LNG));\r\n\r\n        // Set up a PlaceSelectionListener to handle the response.\r\n\r\n        autocompleteFragment.setOnPlaceSelectedListener(new PlaceSelectionListener() {\r\n            @Override\r\n            public void onPlaceSelected(Place place) {\r\n                // TODO: Get info about the selected place.\r\n                //For Testing\r\n                //txtView.setText(place.getName() + \",\" + place.getAddress());\r\n                //\r\n                Log.i(TAG, \"Place: \" + place.getName() + \", \" + place.getAddress());\r\n\r\n\r\n                StringTokenizer address = new StringTokenizer(place.getAddress(), \",\");\r\n                String streetNum = address.nextToken();  // Street name and number\r\n                String city = address.nextToken(); // City name\r\n                StringTokenizer stateZip = new StringTokenizer(address.nextToken(), \" \");\r\n                String state = stateZip.nextToken(); // State Name\r\n                String zip = stateZip.nextToken(); // Zip code\r\n                locationEntered = place.getLatLng();\r\n\r\n\r\n                {\r\n                    mMap.clear();\r\n                }\r\n                mCurrentMarker = mMap.addMarker(new MarkerOptions()\r\n                        .position(locationEntered)\r\n                        .title(place.getName()));\r\n                mMap.moveCamera(CameraUpdateFactory\r\n                        .newLatLngZoom(locationEntered, DEFAULT_ZOOM));\r\n\r\n\r\n\r\n\r\n\r\n                /*https://maps.googleapis.com/maps/api/distancematrix/json?origins=Vancouver+BC|Seattle&destinations=San+Francisco|Victoria+BC&mode=bicycling&language=fr-FR&key=AIzaSyDAhzX0Vvqd5Xnv7eyUHr5drHWdQwZgeq8\r\n                */\r\n                Intent i = new Intent(MapsActivity.this, AddEventActivity.class);\r\n                i.putExtra(\"actID\", \"mapsActivity\");\r\n                String stringUrl = \"https://maps.googleapis.com/maps/api/distancematrix/json?origins=\" + \"West Texas A&M University\" + \"&destinations=\" + place.getAddress() + \"&mode=driving&language=fr-FR&avoid=tolls&key=AIzaSyDAhzX0Vvqd5Xnv7eyUHr5drHWdQwZgeq8\";\r\n                /*String stringUrl = \"https://maps.googleapis.com/maps/api/distancematrix/json?origins=Vancouver+BC|Seattle&destinations=San+Francisco|Victoria+BC&mode=bicycling&language=fr-FR&key=AIzaSyDAhzX0Vvqd5Xnv7eyUHr5drHWdQwZgeq8\";\r\n                */\r\n                new getData(MapsActivity.this).execute(stringUrl);\r\n                /*\r\n                String time = txtView.getText().toString();\r\n                displayToast(time); */\r\n\r\n\r\n\r\n                /* try {\r\n                    URL url = new URL(\"https://maps.googleapis.com/maps/api/distancematrix/json?origins=Vancouver+BC|Seattle&destinations=San+Francisco|Victoria+BC&mode=bicycling&language=fr-FR&key=AIzaSyDAhzX0Vvqd5Xnv7eyUHr5drHWdQwZgeq8\");\r\n                    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\r\n                    urlConnection.setRequestMethod(\"GET\");\r\n                    urlConnection.disconnect();\r\n                }\r\n                catch (MalformedURLException ex) {\r\n                    Log.e(\"httptest\",Log.getStackTraceString(ex));\r\n                }\r\n                catch (IOException ex) {\r\n                    Log.e(\"httptest\",Log.getStackTraceString(ex));\r\n                } */\r\n\r\n\r\n\r\n                traveltime = getTravel();\r\n                String test = \"test \" + traveltime;\r\n                System.out.println(\"test: \" + test);\r\n\r\n                //displayToast(traveltime);\r\n\r\n\r\n\r\n                i.putExtra(\"street\", streetNum);\r\n                i.putExtra(\"city\", city);\r\n                i.putExtra(\"state\", state);\r\n                i.putExtra(\"zip\", zip);\r\n                i.putExtra(\"name\", place.getName());\r\n                i.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);\r\n\r\n                startActivity(i);\r\n            }\r\n\r\n            @Override\r\n            public void onError(Status status) {\r\n                // TODO: Handle the error.\r\n                Log.i(TAG, \"An error occurred: \" + status);\r\n            }\r\n        });\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Manipulates the map once available.\r\n     * This callback is triggered when the map is ready to be used.\r\n     * This is where we can add markers or lines, add listeners or move the camera. In this case,\r\n     * we just add a marker near Sydney, Australia.\r\n     * If Google Play services is not installed on the device, the user will be prompted to install\r\n     * it inside the SupportMapFragment. This method will only be triggered once the user has\r\n     * installed Google Play services and returned to the app.\r\n     */\r\n    @Override\r\n    public void onMapReady(GoogleMap googleMap) {\r\n        mMap = googleMap;\r\n        mMap.clear();\r\n\r\n\r\n\r\n        getLocationPermission();\r\n        updateLocationUI();\r\n\r\n        LatLng USA = new LatLng(39.381266, -97.922211);\r\n        float zoom = 3.5f;\r\n        mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(USA, zoom));\r\n\r\n\r\n        /*mMap.addMarker(new MarkerOptions()\r\n                .position(new LatLng(10, 10))\r\n                .title(\"Hello world\"));*/\r\n\r\n\r\n        /*LatLng current = new LatLng(mLastKnownLocation.getLatitude(),\r\n                mLastKnownLocation.getLongitude());*/\r\n\r\n\r\n\r\n\r\n    }\r\n    public void setDouble(String result) {\r\n\r\n        String res[]=result.split(\",\");\r\n        Double min=Double.parseDouble(res[0])/60;\r\n        traveltime = (int) (min / 60) + \" hr \" + (int) (min % 60) + \" mins\";\r\n        System.out.println(\"test1 + \" + traveltime);\r\n        /*txtView.setText(traveltime);\r\n        * */\r\n\r\n\r\n    }\r\n    public String getTravel(){\r\n        return traveltime;\r\n    }\r\n   /*\r\n    *Needs testing\r\n    * private void getDeviceLocation() {\r\n\r\n         * Get the best and most recent location of the device, which may be null in rare\r\n         * cases when a location is not available.\r\n\r\n        try {\r\n            displayToast(getString(R.string.location_test));\r\n            if (mLocationPermissionGranted) {\r\n                Task<Location> locationResult = mFusedLocationProviderClient.getLastLocation();\r\n                locationResult.addOnCompleteListener(this, new OnCompleteListener<Location>() {\r\n                    @Override\r\n                    public void onComplete(@NonNull Task<Location> task) {\r\n                        if (task.isSuccessful()) {\r\n                            // Set the map's camera position to the current location of the device.\r\n                            mLastKnownLocation = task.getResult();\r\n                            mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(\r\n                                    new LatLng(mLastKnownLocation.getLatitude(),\r\n                                            mLastKnownLocation.getLongitude()), DEFAULT_ZOOM));\r\n                        } else {\r\n                            Log.d(TAG, \"Current location is null. Using defaults.\");\r\n                            Log.e(TAG, \"Exception: %s\", task.getException());\r\n                            mMap.moveCamera(CameraUpdateFactory\r\n                                    .newLatLngZoom(mDefaultLocation, DEFAULT_ZOOM));\r\n                            mMap.getUiSettings().setMyLocationButtonEnabled(false);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        } catch (SecurityException e)  {\r\n\r\n            Log.e(\"Exception: %s\", e.getMessage());\r\n        }\r\n    }*/\r\n\r\n    private void getLocationPermission() {\r\n        /*\r\n         * Request location permission, so that we can get the location of the\r\n         * device. The result of the permission request is handled by a callback,\r\n         * onRequestPermissionsResult.\r\n         */\r\n        if (ContextCompat.checkSelfPermission(this.getApplicationContext(),\r\n                android.Manifest.permission.ACCESS_FINE_LOCATION)\r\n                == PackageManager.PERMISSION_GRANTED) {\r\n            mLocationPermissionGranted = true;\r\n        } else {\r\n            ActivityCompat.requestPermissions(this,\r\n                    new String[]{android.Manifest.permission.ACCESS_FINE_LOCATION},\r\n                    PERMISSIONS_REQUEST_ACCESS_FINE_LOCATION);\r\n        }\r\n    }\r\n\r\n    private void updateLocationUI() {\r\n        if (mMap == null) {\r\n            return;\r\n        }\r\n        try {\r\n            if (mLocationPermissionGranted) {\r\n\r\n                mMap.setMyLocationEnabled(true);\r\n                mMap.getUiSettings().setMyLocationButtonEnabled(true);\r\n\r\n            } else {\r\n                mMap.setMyLocationEnabled(false);\r\n                mMap.getUiSettings().setMyLocationButtonEnabled(false);\r\n                mLastKnownLocation = null;\r\n                getLocationPermission();\r\n            }\r\n        } catch (SecurityException e)  {\r\n            Log.e(\"Exception: %s\", e.getMessage());\r\n        }\r\n    }\r\n\r\n    public void displayToast(String message) {\r\n        Toast.makeText(getApplicationContext(), message,\r\n                Toast.LENGTH_SHORT).show();\r\n    }\r\n\r\n\r\n\r\n    /** @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        MenuInflater inflater = getMenuInflater();\r\n        inflater.inflate(R.menu.map_options, menu);\r\n        return true;\r\n    }\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n        // Change the map type based on the user's selection.\r\n        switch (item.getItemId()) {\r\n            case R.id.normal_map:\r\n                mMap.setMapType(GoogleMap.MAP_TYPE_NORMAL);\r\n                return true;\r\n            case R.id.hybrid_map:\r\n                mMap.setMapType(GoogleMap.MAP_TYPE_HYBRID);\r\n                return true;\r\n            case R.id.satellite_map:\r\n                mMap.setMapType(GoogleMap.MAP_TYPE_SATELLITE);\r\n                return true;\r\n            case R.id.terrain_map:\r\n                mMap.setMapType(GoogleMap.MAP_TYPE_TERRAIN);\r\n                return true;\r\n            default:\r\n                return super.onOptionsItemSelected(item);\r\n        }\r\n    }*/\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/thetravlendar/MapsActivity.java	(revision fee8c65cf3ee7f8fa63d92359e4cae916db5665f)
+++ app/src/main/java/com/example/thetravlendar/MapsActivity.java	(date 1556499179594)
@@ -187,12 +187,12 @@
 
 
 
-                i.putExtra("street", streetNum);
+                i.putExtra("address", streetNum);
                 i.putExtra("city", city);
                 i.putExtra("state", state);
                 i.putExtra("zip", zip);
-                i.putExtra("name", place.getName());
-                i.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
+                i.putExtra("location", place.getName());
+                //i.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
 
                 startActivity(i);
             }
Index: app/src/main/java/com/example/thetravlendar/AddEventActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.thetravlendar;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.support.design.widget.TextInputEditText;\r\nimport android.support.v7.app.AppCompatActivity;\r\nimport android.support.v7.widget.Toolbar;\r\nimport android.text.TextUtils;\r\nimport android.util.Log;\r\nimport android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.Toast;\r\n\r\nimport com.example.thetravlendar.models.Events;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.firestore.DocumentReference;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\r\nimport com.google.firebase.firestore.QuerySnapshot;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\nimport static com.example.thetravlendar.Utils.Utility.hideKeyboard;\r\nimport static java.lang.Integer.parseInt;\r\n\r\n\r\npublic class  AddEventActivity extends AppCompatActivity implements\r\n        DatePickerFragment.DateDialogListener, StartTimePickerFragment.TimeDialogListener,\r\n        EndTimePickerFragment.TimeDialogListener, ModeOfTransportationFragment.MODDialogListener {\r\n\r\n    private static final String TAG = \"AddToDatabase\";\r\n    private static final String REQUIRED = \"Required\";\r\n    private String Date;\r\n    private String path;\r\n    private static final String DIALOG_TIME = \"AddEventActivity.TimeDialog\";\r\n    private static final String DIALOG_DATE = \"AddEventActivity.DateDialog\";\r\n    private static final String DIALOG_MOD = \"AddEventActivity.\";\r\n    private String ename;\r\n    LinearLayout layout;\r\n    Button buttonSaveEvent;\r\n    TextInputEditText editEventName;\r\n    TextInputEditText editEventDate;\r\n    TextInputEditText editEventStart;\r\n    TextInputEditText editEventEnd;\r\n    TextInputEditText editEventAddress;\r\n    TextInputEditText editEventCity;\r\n    TextInputEditText editEventState;\r\n    TextInputEditText editEventZipCode;\r\n    TextInputEditText editEventMOD;\r\n    TextInputEditText editEventNote;\r\n    TextInputEditText editEventLocation;\r\n    ImageView imageAddLocation;\r\n\r\n    //private DatabaseReference mUserRef, mEventRef;\r\n    private FirebaseAuth mAuth;\r\n    private FirebaseFirestore db;\r\n    private DocumentSnapshot snapshot;\r\n    private DocumentReference docRef;\r\n    private HashMap<String, Object> eventMap = new HashMap<>();\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        Log.d(\"testing\", \"addNote - oncreate\");\r\n        setContentView(R.layout.activity_add_event);\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n\r\n\r\n        buttonSaveEvent = findViewById(R.id.addEventButton);\r\n        editEventName = findViewById(R.id.event_name);\r\n        editEventDate = findViewById(R.id.event_date);\r\n        editEventStart = findViewById(R.id.event_start_time);\r\n        editEventEnd = findViewById(R.id.event_end_time);\r\n        editEventAddress = findViewById(R.id.event_address);\r\n        editEventCity = findViewById(R.id.event_city);\r\n        editEventState = findViewById(R.id.event_state);\r\n        editEventZipCode = findViewById(R.id.event_zip_code);\r\n        editEventMOD = findViewById(R.id.event_mod);\r\n        editEventNote = findViewById(R.id.event_note);\r\n        editEventLocation = findViewById(R.id.event_location);\r\n        imageAddLocation = findViewById(R.id.event_add_location);\r\n\r\n        db = FirebaseFirestore.getInstance();\r\n        //docRef = db.collection(\"users\").document(mAuth.getUid())\r\n        //        .collection(\"events\").document();\r\n        mAuth = FirebaseAuth.getInstance();\r\n        //mUserRef = FirebaseDatabase.getInstance().getReference();\r\n        //mEventRef = FirebaseDatabase.getInstance().getReference().child(\"events\");\r\n\r\n        layout = (LinearLayout) findViewById(R.id.act_add_event);\r\n        //accepts the date from the calendar activity and sets date text field\r\n        Intent intent = getIntent();\r\n        Date = intent.getExtras().getString(\"date\");\r\n        editEventDate.setText(Date);\r\n\r\n        String actID = intent.getExtras().getString(\"actID\");\r\n        if(actID.equals(\"recycler\")){\r\n            updateEvent();\r\n            System.out.println(\"recycler \" + actID);\r\n        }\r\n        if (actID.equals(\"restartAddEvent\")) {\r\n            restartAddEvent();\r\n        }\r\n\r\n        toolbar.setNavigationIcon(R.drawable.ic_arrow_back_black_24dp);\r\n        toolbar.setNavigationOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                startActivity(new Intent(getApplicationContext(),CalendarActivity.class));\r\n            }\r\n        });\r\n\r\n        layout.setOnTouchListener(new View.OnTouchListener() {\r\n            @Override\r\n            public boolean onTouch(View v, MotionEvent event) {\r\n                hideKeyboard(v,getApplicationContext());\r\n                return false;\r\n            }\r\n        });\r\n        editEventDate.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                DatePickerFragment dialog = new DatePickerFragment();\r\n                dialog.show(getSupportFragmentManager(), DIALOG_DATE);\r\n            }\r\n        });\r\n\r\n        editEventStart.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                StartTimePickerFragment dialog = new StartTimePickerFragment();\r\n                dialog.show(getSupportFragmentManager(),DIALOG_TIME);\r\n            }\r\n        });\r\n\r\n        editEventEnd.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                EndTimePickerFragment dialog = new EndTimePickerFragment();\r\n                dialog.show(getSupportFragmentManager(),DIALOG_TIME);\r\n            }\r\n        });\r\n\r\n        editEventMOD.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                ModeOfTransportationFragment dialog = new ModeOfTransportationFragment();\r\n                dialog.show(getSupportFragmentManager(), DIALOG_MOD);\r\n            }\r\n        });\r\n\r\n        buttonSaveEvent.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                submitEvent();\r\n            }\r\n        });\r\n\r\n        editEventLocation.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n\r\n            }\r\n        });\r\n\r\n        imageAddLocation.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                //displayToast(getString(R.string.Test1));\r\n                Intent myIntent = new Intent(AddEventActivity.this,MapsActivity.class);\r\n\r\n                startActivity(myIntent);\r\n            }\r\n        });\r\n\r\n\r\n\r\n\r\n        // For Maps Activity\r\n        //Bundle extras = getIntent().getExtras();\r\n        if (actID.equals(\"mapsActivity\") || actID.equals(\"mapsView\")) {\r\n            /*MapsActivity maps = new MapsActivity();\r\n            String travelTime = maps.getTravel();\r\n            System.out.println(\"travel \" + travelTime);*/\r\n            String street = intent.getExtras().getString(\"address\");\r\n            String city = intent.getExtras().getString(\"city\");\r\n            String state = intent.getExtras().getString(\"state\");\r\n            String zip = intent.getExtras().getString(\"zip\");\r\n            String name = intent.getExtras().getString(\"name\");\r\n            /*eventMap.put(\"address\", street);\r\n            eventMap.put(\"city\", city);\r\n            eventMap.put(\"state\", state);\r\n            eventMap.put(\"zip\", zip);\r\n            eventMap.put(\"location\", name);\r\n            setTextFields(eventMap);*/\r\n            //String travel = intent.getExtras().getString(\"time\");\r\n            //The key argument here must match that used in the other activity\r\n            System.out.println(\"addMaps\");\r\n            editEventAddress.setText(street);\r\n            editEventCity.setText(city);\r\n            editEventState.setText(state);\r\n            editEventZipCode.setText(zip);\r\n            editEventLocation.setText(name);\r\n            //editEventNote.setText(travel);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private void restartAddEvent() {\r\n        eventMap = (HashMap<String, Object>) getIntent().getSerializableExtra(\"map\");\r\n        setTextFields(eventMap);\r\n    }\r\n\r\n    private void updateEvent(){\r\n        path = getIntent().getExtras().get(\"path\").toString();\r\n        HashMap eventMap = (HashMap<String,Object>)getIntent().getSerializableExtra(\"map\");\r\n        setTextFields(eventMap);\r\n    }\r\n\r\n    private void setTextFields(Map<String, Object> eventMap){\r\n        editEventName.setText(eventMap.get(\"name\").toString());\r\n        editEventDate.setText(eventMap.get(\"date\").toString());\r\n        editEventStart.setText(eventMap.get(\"start_time\").toString());\r\n        editEventEnd.setText(eventMap.get(\"end_time\").toString());\r\n        editEventAddress.setText(eventMap.get(\"address\").toString());\r\n        editEventLocation.setText(eventMap.get(\"location\").toString());\r\n        editEventCity.setText(eventMap.get(\"city\").toString());\r\n        //editEventMOD.setText(eventMap.get(\"mod\").toString());\r\n        editEventNote.setText(eventMap.get(\"note\").toString());\r\n        editEventState.setText(eventMap.get(\"state\").toString());\r\n        editEventZipCode.setText(eventMap.get(\"zip\").toString());\r\n    }\r\n\r\n    private void submitEvent() {\r\n        final String name = editEventName.getText().toString();\r\n        final String date = editEventDate.getText().toString();\r\n        System.out.println(\"Date = \" + date);\r\n        final String startTime = editEventStart.getText().toString();\r\n        final String endTime = editEventEnd.getText().toString();\r\n        final String address = editEventAddress.getText().toString();\r\n        final String city = editEventCity.getText().toString();\r\n        final String state = editEventState.getText().toString();\r\n        final String zip = editEventZipCode.getText().toString();\r\n        final String mod = editEventMOD.getText().toString();\r\n        final String location = editEventLocation.getText().toString();\r\n        final String note = editEventNote.getText().toString();\r\n\r\n        // start time\r\n        int SHOUR = startTime.indexOf(\":\");\r\n        int SMIN  = startTime.indexOf(\" \");\r\n        String sHour = startTime.substring(0, SHOUR);\r\n        System.out.println(\"hour = \" + sHour);\r\n        String sMin = startTime.substring(SHOUR+1, SMIN);\r\n        System.out.println(\"min = \" + sMin);\r\n        String sME = startTime.substring(SMIN+1);\r\n        System.out.println(\"sME = \" + sME);\r\n        int sTime1 = parseInt(sHour+sMin);\r\n        //int sTime;\r\n\r\n        // end time\r\n        int EHOUR = endTime.indexOf(\":\");\r\n        int EMIN  = endTime.indexOf(\" \");\r\n        String eHour = endTime.substring(0, EHOUR);\r\n        System.out.println(\"hour = \" + eHour);\r\n        String eMin = endTime.substring(EHOUR+1, EMIN);\r\n        System.out.println(\"min = \" + eMin);\r\n        String eME = endTime.substring(EMIN+1);\r\n        System.out.println(\"eME = \" + eME);\r\n        int eTime1 = parseInt(eHour+eMin);\r\n        //int eTime;\r\n\r\n        if(sME.equals(\"AM\")) {\r\n            if (sTime1 >= 1200 && sTime1 <= 1259) { // || eTimeH <= 1259){\r\n                sHour = \"00\";\r\n                sTime1 = parseInt(sHour + sMin);\r\n                //System.out.println(\"stime = \" + sTime1);\r\n            }\r\n        }\r\n        if(eME.equals(\"AM\")) {\r\n                if (eTime1 >= 1200 && eTime1 <= 1259) {\r\n                eHour = \"00\";\r\n                eTime1 = parseInt(eHour + eMin);\r\n                //System.out.println(\"etime = \"+ eTime1);\r\n                }\r\n        }\r\n        if(sME.equals(\"PM\") && sTime1 < 1200) {\r\n            sTime1 += 1200;\r\n            //System.out.println(\"stime = \" + sTime1);\r\n        }\r\n        if(eME.equals(\"PM\") && eTime1 < 1200) {\r\n            eTime1 += 1200;\r\n            //System.out.println(\"etime = \"+ eTime1);\r\n        }\r\n        final Integer sTime = sTime1;\r\n        final Integer eTime = eTime1;\r\n        System.out.println(\"sTime = \" + sTime);\r\n        System.out.println(\"eTime = \" + eTime);\r\n\r\n\r\n        //final String location = editEventLocation.getText().toString();\r\n\r\n        //Query query = mEventRef.orderByChild(\"start_time\").\r\n\r\n        /*Calendar calfordDate = Calendar.getInstance();\r\n        SimpleDateFormat currentDate = new SimpleDateFormat(\"dd-MMM-yyyy\");\r\n        String saveCurrentDate = currentDate.format(calfordDate.getTime());\r\n\r\n        //Calendar calfordTime = Calendar.getInstance();\r\n        SimpleDateFormat currentTime = new SimpleDateFormat(\"HH:mm\");\r\n        String saveCurrentTime = currentTime.format(calfordDate.getTime());\r\n\r\n        //String eventRandom = saveCurrentDate + saveCurrentTime;*/\r\n\r\n        if (TextUtils.isEmpty(name)) {\r\n            editEventName.setError(REQUIRED);\r\n            return;\r\n        }\r\n\r\n        if (TextUtils.isEmpty(date)) {\r\n            editEventDate.setError(REQUIRED);\r\n            return;\r\n        }\r\n\r\n        if (TextUtils.isEmpty(startTime)) {\r\n            editEventStart.setError(REQUIRED);\r\n            return;\r\n        }\r\n\r\n        if (TextUtils.isEmpty(endTime)) {\r\n            editEventEnd.setError(REQUIRED);\r\n            return;\r\n        }\r\n        if(sTime > eTime){\r\n            Toast.makeText(this, \"End Time error.\", Toast.LENGTH_SHORT).show();\r\n            editEventEnd.setError(REQUIRED);\r\n            return;\r\n        }\r\n\r\n        String user = mAuth.getCurrentUser().getUid();\r\n        //Map<String, Object> eventMap = new HashMap<>();\r\n        eventMap.put(\"name\", name);\r\n        eventMap.put(\"search\", name.toLowerCase());\r\n        eventMap.put(\"date\", date);\r\n        eventMap.put(\"start_time\", startTime);\r\n        eventMap.put(\"end_time\", endTime);\r\n        eventMap.put(\"address\", address);\r\n        eventMap.put(\"city\", city);\r\n        eventMap.put(\"state\", state);\r\n        eventMap.put(\"zip\", zip);\r\n        eventMap.put(\"mod\", mod);\r\n        eventMap.put(\"location\", location);\r\n        eventMap.put(\"note\", note);\r\n        eventMap.put(\"military_start\", sTime);\r\n        eventMap.put(\"military_end\", eTime);\r\n\r\n        //DocumentReference userId = db.collection(\"users\").document(user).collection(\"events\").document();\r\n        //System.out.println(\"userid\" + userId);\r\n\r\n        /*\r\n        db.collection(\"users\").document(user)\r\n                .collection(\"events\").whereEqualTo(\"date\", date)\r\n                .whereEqualTo(\"end_time\", startTime)\r\n                .get()\r\n                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\r\n                    @Override\r\n                    public void onComplete(@NonNull Task<QuerySnapshot> task) {\r\n                        if (task.isSuccessful()) {\r\n                            Toast.makeText(AddEventActivity.this, \"Start time conflicts with another event\", Toast.LENGTH_SHORT).show();\r\n                            return;\r\n                        }\r\n                    }\r\n                });\r\n                */\r\n        System.out.println(\"right before\");\r\n\r\n            System.out.println(\"conflict testing\");\r\n            db.collection(\"users\").document(user)\r\n                    .collection(\"events\").whereEqualTo(\"date\", Date).get()\r\n                    .addOnSuccessListener(new OnSuccessListener<QuerySnapshot>() {\r\n                        @Override\r\n                        public void onSuccess(QuerySnapshot queryDocumentSnapshots) {\r\n                            //boolean flag = false;\r\n                            String conflict = \"false\";\r\n                            for (QueryDocumentSnapshot documentSnapshot : queryDocumentSnapshots) {\r\n                                Events events = documentSnapshot.toObject(Events.class);\r\n                                if (startTime.equals(events.getEnd_time())) {\r\n                                    System.out.println(\"start time conflict\");\r\n                                    //SendUserToRecycler();\r\n                                    conflictToast(events.getName());\r\n                                    conflict = \"true\";\r\n                                    return;\r\n                                }\r\n                                if (endTime.equals(events.getStart_time())) {\r\n                                    System.out.println(\"end time conflict\");\r\n                                    //SendUserToRecycler();\r\n                                    conflictToast(events.getName());\r\n                                    conflict = \"true\";\r\n                                    return;\r\n                                }\r\n                                if (startTime.equals(events.getStart_time())) {\r\n                                    System.out.println(\"start time == start time conflict\");\r\n                                    //SendUserToRecycler();\r\n                                    conflictToast(events.getName());\r\n                                    conflict = \"true\";\r\n                                    return;\r\n                                }\r\n                                if (endTime.equals(events.getEnd_time())) {\r\n                                    System.out.println(\"end time == end time conflict\");\r\n                                    //SendUserToRecycler();\r\n                                    conflictToast(events.getName());\r\n                                    conflict = \"true\";\r\n                                    return;\r\n                                }\r\n                                /*if(sTime >= (events.getsTime()) && sTime <= (events.geteTime())){\r\n                                    System.out.println(\"nested event conflict\");\r\n                                    conflictToast(events.getName());\r\n                                    conflict = \"true\";\r\n                                    return;\r\n                                }*/\r\n                            }\r\n                            if (conflict.equals(\"false\")) {\r\n                                System.out.println(\"conflict flag == 0\");\r\n                                if (path == null) {\r\n                                    db.collection(\"users\").document(user)\r\n                                            .collection(\"events\").document()\r\n                                            .set(eventMap).addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                                        @Override\r\n                                        public void onSuccess(Void aVoid) {\r\n                                            SendUserToCalendarActivity();\r\n                                            Toast.makeText(AddEventActivity.this, \"Successfully added event\", Toast.LENGTH_SHORT).show();\r\n                                        }\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    db.document(path).update(eventMap).addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                                        @Override\r\n                                        public void onSuccess(Void aVoid) {\r\n                                            SendUserToCalendarActivity();\r\n                                            Toast.makeText(AddEventActivity.this, \"Successfully updated event\", Toast.LENGTH_SHORT).show();\r\n                                        }\r\n                                    });\r\n                                }\r\n\r\n                            }\r\n                            else if (conflict.equals(\"true\")) {\r\n                                System.out.println(\"conflict flag == 1\");\r\n                                Toast.makeText(AddEventActivity.this, \"Conflicting events\", Toast.LENGTH_SHORT).show();\r\n                                restartAddEventActivity();\r\n                            }\r\n                        }\r\n                    });\r\n\r\n        }\r\n\r\n    private void conflictToast(String name){\r\n        Toast.makeText(AddEventActivity.this, \"Conflict with \" + name + \" event.\", Toast.LENGTH_SHORT).show();\r\n    }\r\n\r\n    private void SendUserToRecycler() {\r\n        Intent intent = new Intent(AddEventActivity.this, ViewEventRecyclerActivity.class);\r\n        intent.putExtra(\"date\", Date);\r\n        startActivity(intent);\r\n        finish();\r\n    }\r\n\r\n    private void SendUserToCalendarActivity() {\r\n        Intent intent = new Intent(AddEventActivity.this, CalendarActivity.class);\r\n        startActivity(intent);\r\n    }\r\n\r\n    private void restartAddEventActivity() {\r\n        Intent intent = new Intent(AddEventActivity.this, AddEventActivity.class);\r\n        intent.putExtra(\"date\", Date);\r\n        intent.putExtra(\"map\", eventMap);\r\n        intent.putExtra(\"actID\", \"restartAddEvent\");\r\n        startActivity(intent);\r\n    }\r\n\r\n    public String formatDate(Date date) {\r\n        SimpleDateFormat sdf = new SimpleDateFormat(\"MMM dd yyyy\");\r\n        String hireDate = sdf.format(date);\r\n        return hireDate;\r\n    }\r\n    @Override\r\n    public void onFinishMODDialog(String mod){\r\n        editEventMOD.setText(mod);\r\n    }\r\n    @Override\r\n    public void onFinishDateDialog(Date date){\r\n        editEventDate.setText(formatDate(date));\r\n    }\r\n    @Override\r\n    public void onFinishStartDialog(String time) {\r\n        //Toast.makeText(this, \"Selected Time : \"+ time, Toast.LENGTH_SHORT).show();\r\n        editEventStart.setText(time);\r\n    }\r\n    @Override\r\n    public void onFinishEndDialog(String time) {\r\n        //Toast.makeText(this, \"Selected Time : \"+ time, Toast.LENGTH_SHORT).show();\r\n        editEventEnd.setText(time);\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        MenuInflater inflater = getMenuInflater();\r\n        inflater.inflate(R.menu.menu_settings, menu);\r\n        /*final SearchView searchView = (SearchView) MenuItemCompat\r\n                .getActionView(menu.findItem(R.id.action_search));\r\n        SearchManager searchManager = (SearchManager) getSystemService(SEARCH_SERVICE);\r\n        searchView.setSearchableInfo(searchManager.getSearchableInfo(getComponentName()));\r\n        */\r\n        return true;\r\n    }\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n        switch (item.getItemId()) {\r\n            // action with ID action_refresh was selected\r\n            case R.id.action_account_settings:\r\n                Toast.makeText(this, \"Refresh selected\", Toast.LENGTH_SHORT)\r\n                        .show();\r\n                Intent intent = new Intent(this, AccountSettingsActivity.class);\r\n                startActivity(intent);\r\n                break;\r\n            // action with ID action_settings was selected\r\n            /*case R.id.action_search:\r\n                Toast.makeText(this, \"Settings selected\", Toast.LENGTH_SHORT)\r\n                        .show();\r\n                break;\r\n            */\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return true;\r\n    }\r\n    private void toastMessage(String message){\r\n        Toast.makeText(this,message,Toast.LENGTH_SHORT).show();\r\n    }\r\n\r\n    //@Override\r\n    //protected void onStart() {\r\n    //    super.onStart();\r\n        \r\n    //}\r\n   /*@Override\r\n    public void onSaveInstanceState(Bundle savedInstanceState) {\r\n        // Save the user's current game state\r\n        //savedInstanceState.putInt(STATE_SCORE, currentScore);\r\n        //savedInstanceState.putInt(STATE_LEVEL, currentLevel);\r\n\r\n        // Always call the superclass so it can save the view hierarchy state\r\n        super.onSaveInstanceState(savedInstanceState);\r\n        savedInstanceState.putString(\"EventName\", editEventName.getText().toString());\r\n    }\r\n\r\n\r\n    public void onRestoreInstanceState(Bundle savedInstanceState) {\r\n        // Always call the superclass so it can restore the view hierarchy\r\n        super.onRestoreInstanceState(savedInstanceState);\r\n\r\n        // Restore state members from saved instance\r\n        //currentScore = savedInstanceState.getInt(STATE_SCORE);\r\n        //currentLevel = savedInstanceState.getInt(STATE_LEVEL);\r\n        editEventName.setText(savedInstanceState.getString(\"EventName\"));\r\n    }*/\r\n\r\n    @Override\r\n    public void onPause() {\r\n        super.onPause();\r\n\r\n    }\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n\r\n    }\r\n    @Override\r\n    public void onStart(){\r\n        super.onStart();\r\n        /*docRef.addSnapshotListener(new EventListener<DocumentSnapshot>() {\r\n            @Override\r\n            public void onEvent(@Nullable DocumentSnapshot documentSnapshot, @Nullable FirebaseFirestoreException e) {\r\n\r\n            }\r\n        });*/\r\n        //editEventName.setText(ename);\r\n    }\r\n\r\n    @Override\r\n    public void onStop() {\r\n        super.onStop();\r\n        //ename = editEventName.getText().toString();\r\n\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/thetravlendar/AddEventActivity.java	(revision fee8c65cf3ee7f8fa63d92359e4cae916db5665f)
+++ app/src/main/java/com/example/thetravlendar/AddEventActivity.java	(date 1556499179587)
@@ -180,8 +180,31 @@
             public void onClick(View v) {
                 //displayToast(getString(R.string.Test1));
                 Intent myIntent = new Intent(AddEventActivity.this,MapsActivity.class);
+                myIntent.putExtra("name", editEventName.getText().toString());
+                myIntent.putExtra("date", editEventDate.getText().toString());
+                myIntent.putExtra("start_time", editEventStart.getText().toString());
+                myIntent.putExtra("end_time", editEventEnd.getText().toString());
+                myIntent.putExtra("address", editEventAddress.getText().toString());
+                myIntent.putExtra("city", editEventCity.getText().toString());
+                myIntent.putExtra("state", editEventState.getText().toString());
+                myIntent.putExtra("zip", editEventZipCode.getText().toString());
+                myIntent.putExtra("location", editEventLocation.getText().toString());
+                myIntent.putExtra("note", editEventNote.getText().toString());
+                startActivity(myIntent);
+                /*eventMap.put("name", editEventName.getText().toString());
+                eventMap.put("date", editEventDate.getText().toString());
+                eventMap.put("start_time", editEventStart.getText().toString());
+                eventMap.put("end_time", editEventEnd.getText().toString());
+                eventMap.put("address", editEventAddress.getText().toString());
+                eventMap.put("location", editEventLocation.getText().toString());
+                eventMap.put("city", editEventCity.getText().toString());
+                eventMap.put("note", editEventNote.getText().toString());
+                eventMap.put("state", editEventState.getText().toString());
+                eventMap.put("zip", editEventZipCode.getText().toString());
+                myIntent.putExtra("eventMap", eventMap);
 
                 startActivity(myIntent);
+                */
             }
         });
 
@@ -194,25 +217,38 @@
             /*MapsActivity maps = new MapsActivity();
             String travelTime = maps.getTravel();
             System.out.println("travel " + travelTime);*/
-            String street = intent.getExtras().getString("address");
+            String name = intent.getExtras().getString("name");
+            String date = intent.getExtras().getString("date");
+            String start = intent.getExtras().getString("start_time");
+            String end = intent.getExtras().getString("end_time");
+            String address = intent.getExtras().getString("address");
             String city = intent.getExtras().getString("city");
             String state = intent.getExtras().getString("state");
             String zip = intent.getExtras().getString("zip");
-            String name = intent.getExtras().getString("name");
+            String loc = intent.getExtras().getString("location");
+            String note = intent.getExtras().getString("note");
+
+
             /*eventMap.put("address", street);
             eventMap.put("city", city);
             eventMap.put("state", state);
             eventMap.put("zip", zip);
             eventMap.put("location", name);
-            setTextFields(eventMap);*/
+            setTextFields(eventMap);
+            */
             //String travel = intent.getExtras().getString("time");
             //The key argument here must match that used in the other activity
             System.out.println("addMaps");
-            editEventAddress.setText(street);
+            editEventName.setText(name);
+            editEventDate.setText(date);
+            editEventStart.setText(start);
+            editEventEnd.setText(end);
+            editEventAddress.setText(address);
             editEventCity.setText(city);
             editEventState.setText(state);
             editEventZipCode.setText(zip);
-            editEventLocation.setText(name);
+            editEventLocation.setText(loc);
+            editEventNote.setText(note);
             //editEventNote.setText(travel);
 
         }
@@ -230,18 +266,18 @@
         setTextFields(eventMap);
     }
 
-    private void setTextFields(Map<String, Object> eventMap){
-        editEventName.setText(eventMap.get("name").toString());
-        editEventDate.setText(eventMap.get("date").toString());
-        editEventStart.setText(eventMap.get("start_time").toString());
-        editEventEnd.setText(eventMap.get("end_time").toString());
-        editEventAddress.setText(eventMap.get("address").toString());
-        editEventLocation.setText(eventMap.get("location").toString());
-        editEventCity.setText(eventMap.get("city").toString());
+    private void setTextFields(Map<String, Object> eventsMap){
+        editEventName.setText(eventsMap.get("name").toString());
+        editEventDate.setText(eventsMap.get("date").toString());
+        editEventStart.setText(eventsMap.get("start_time").toString());
+        editEventEnd.setText(eventsMap.get("end_time").toString());
+        editEventAddress.setText(eventsMap.get("address").toString());
+        editEventLocation.setText(eventsMap.get("location").toString());
+        editEventCity.setText(eventsMap.get("city").toString());
         //editEventMOD.setText(eventMap.get("mod").toString());
-        editEventNote.setText(eventMap.get("note").toString());
-        editEventState.setText(eventMap.get("state").toString());
-        editEventZipCode.setText(eventMap.get("zip").toString());
+        editEventNote.setText(eventsMap.get("note").toString());
+        editEventState.setText(eventsMap.get("state").toString());
+        editEventZipCode.setText(eventsMap.get("zip").toString());
     }
 
     private void submitEvent() {
@@ -585,7 +621,7 @@
     @Override
     public void onResume() {
         super.onResume();
-
+        //setTextFields(eventMap);
     }
     @Override
     public void onStart(){
